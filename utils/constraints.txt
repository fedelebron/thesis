var cp[C * S] binary;
var csd[C * SD] binary;
var x[C * L_ * P * R] binary;

var class_date[C * L_ * D] binary;
var busy[P * C * D] binary;

maximize quality:
  sum<c, l, p, k> in C * L_ * P * R:
    x[c, l, p, k] * q[p, c];

subto class_date_coherency:
  forall<c, sd, p, l, d> in C * SD * S * L_ * D
    with ds[p, sd, l, d] == 1
         and l < n[c]:
    csd[c, sd] + cp[c, p] - 1 <= class_date[c, l, d];

subto class_date_coherency_2:
  forall<c, l> in C * L_ with l < n[c]:
    sum<d> in D: class_date[c, l, d] == 1;

subto class_date_coherency_3:
  forall<c, l, d> in C * L_ * D with l >= n[c]:
    class_date[c, l, d] == 0;

subto busy_l_coherency_2:
  forall <c, l, p> in C * L_ * P with l >= n[c]:
    sum<k> in R: x[c, l, p, k] == 0;

subto busy_coherency:
  forall <p, c, l, d> in P * C * L_ * D:
    busy[p, c, d] >= (sum<k> in R: x[c, l, p, k]) + class_date[c, l, d] - 1;

subto professor_availability_1:
  forall <p, d> in P*D with a[p, d] == 0:
    forall<c> in C: busy[p, c, d] == 0;

subto professor_availability_2:
  forall <p, d> in P*D with a[p, d] == 1:
    sum<c> in C: busy[p, c, d] <= 1;

subto professor_classes_limit:
  forall <p> in P:
    sum<c, d> in C * D: busy[p, c, d] <= maxp[p];

subto valid_role:
    forall <c, l, p, k> in C * L_ * P * R with r[p, k] == 0:
      x[c, l, p, k] == 0;

subto satisfied_roles_1:
    forall <c, l, k> in C * L_ * R with l < n[c]:
      sum<p> in P with r[p, k] == 1:
        x[c, l, p, k] >= m[c, l, k];

subto satisfied_roles_2:
    forall <c, l, k> in C * L_ * R with l < n[c]:
      sum<p> in P with r[p, k] == 1:
        x[c, l, p, k] <= M[c, l, k];

subto role_family_1:
  forall <c, l, k> in C * L_ * R with l < n[c] and 0 == M[c, l, k]:
    forall <p> in P with r[p, k] == 1:
      x[c, l, p, k] == 0;

subto role_family_2:
  forall <c, l, k> in C * L_ * R with l < n[c] and m[c, l, k] == M[c, l, k]
  and M[c, l, k] != 0:
    sum <p> in P with r[p, k] == 1:
      x[c, l, p, k] == m[c, l, k];


subto no_duplicate_profs:
    forall <c, l, p> in C * L_ * P with l < n[c]:
      sum<k> in R: x[c, l, p, k] <= 1;

subto legal_weekly_pattern:
  forall <c, s> in C * S:
    cp[c, s] <= pp[c, s];

subto some_weekly_pattern:
  forall <c> in C:
    sum<s> in S: cp[c, s] == 1;

subto legal_start_date:
  forall <c, sd> in C * SD:
    csd[c, sd] <= psd[c, sd];

subto some_start_date:
  forall <c> in C:
    sum<sd> in SD: csd[c, sd] == 1;
